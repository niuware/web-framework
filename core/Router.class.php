<?php 

/**
* This class is part of the core of Niuware WebFramework 
* and is not particularly intended to be modified.
* For information about the license please visit the 
* GIT repository at:
* https://github.com/niuware/web-framework
*/
namespace Niuware\WebFramework;

require_once 'app/config/routes.php';

use App\Config\Routes;

/**
* Process the URL to the correct route
*/
class Router {

    private $path;

    private $controller;

    private $action;
    
    private $adminPath = null;

    private $error = true;

    private $admin = false;
    
    private $requestMethod = null;
    
    private $queryString = [];
    
    private $currentUri = "";

    function __construct() {

        $this->initialize();

        $this->redirectFail();
    }

    /**
    * Parse the request URL and executes the routing
    */
    private function initialize() {
        
        $this->setRequestMethod();

        if (\App\Config\BASE_PATH === '/') {

            $this->currentUri = substr(filter_input(\App\Config\SERVER_ENV_VAR, 'REQUEST_URI', FILTER_SANITIZE_URL), 1);
        } else {

            $this->currentUri = str_replace('/' . \App\Config\BASE_PATH, '', filter_input(\App\Config\SERVER_ENV_VAR, 'REQUEST_URI', FILTER_SANITIZE_URL));
        }

        $this->path = explode('/', $this->currentUri);

        $this->action = $this->path[0];
        
        $this->setQueryString();

        // If the URL is associated to a controller, then load it
        if (isset(Routes::$views['main'][$this->path[0]])) {

            $this->redirectMain();

            $this->error = false;

        } else {
            
            if (isset($this->path[1])) {
                
                $this->adminPath = str_replace("/", "", parse_url($this->path[1], \PHP_URL_PATH));
            }

            $this->redirectTask($this->path[0]);
        }
    }
    
    private function setQueryString() {
        
        $queryString = filter_input(INPUT_SERVER, 'QUERY_STRING');
        
        if ($queryString !== "") {
            
            parse_str($queryString, $this->queryString);
            
            $this->path[0] = str_replace(['?' . $queryString, $queryString], '', $this->path[0]);
            
            $this->action = $this->path[0];
        }
    }
    
    /**
     * Sets the request method
     */
    private function setRequestMethod() {
        
        $requestMethod = filter_input(\App\Config\SERVER_ENV_VAR, 'REQUEST_METHOD', FILTER_SANITIZE_URL);
        
        if ($requestMethod === 'GET') {
            
            $this->requestMethod = 'get';
            
        } elseif ($requestMethod === 'POST') {
            
            $this->requestMethod = 'post';
            
        } elseif ($requestMethod === 'DELETE') {
            
            $this->requestMethod = 'delete';
        }
    }

    /**
    * Executes the routing for controllers (NOT API calls or admin controllers)
    */
    private function redirectMain() {

        if (!$this->requireLogin()) {
            
            Auth::requireAuth(false);

            $this->controller = Routes::$views['main'][$this->path[0]][0];

        } else {

            $this->setRequireAuthMode();
        }
    }

    /**
    * Verify if the controller requires user login
    * @return bool Login required?
    */
    private function requireLogin() {

        $requireLogin = false;

        if (isset(Routes::$views['main'][$this->path[0]][1])) {

            $requireLogin = Routes::$views['main'][$this->path[0]][1];
        }

        return $requireLogin;
    }

    /**
     * Redirects to an API call or admin controller 
     * @param type $action
     * @return type
     */
    private function redirectTask($action) {

        if ($action === 'api') {
            
            $input = new HttpInput($this->requestMethod);
            
            $input->withApi();

            exit;

        } 
        else if ($action === 'admin') {

            return $this->setRequireAdminAuthMode();
        }
        else if ($action === 'console:nwf') {
            
            if (\App\Config\CONSOLE_MODE === 'web' || \App\Config\CONSOLE_MODE === 'enabled') {
                
                $console = new Console($this->path, 'web');

                exit(nl2br($console->getResult()));
            }
        }
    }
    
    /**
     * Sets the Router as require admin authenticating mode
     */
    private function setRequireAdminAuthMode() {
        
        $this->admin = true;
        
        Auth::requireAuth(true, 'admin');
        
        $this->redirectAuthAdminMode();
    }

    /**
    * Sets the Router as require authenticating mode
    */
    private function setRequireAuthMode() {
        
        Auth::requireAuth(true);

        $this->redirectAuthMode();
    }

    /**
    * Redirects the browser to a default route, if an error was 
    * generated by the routing
    */
    private function redirectFail() {

        if ($this->error) {

            if (!$this->admin) {

                $this->redirectFailMain();

            } else {

                $this->redirectFailAdmin();
            }

            header('HTTP/1.0 403 Forbidden');
            
            exit;
        }
    }
    
    /**
     * Redirects the browser to the default main application route
     */
    private function redirectFailMain() {
        
        if (!empty(Routes::$views['main'])) {
                    
            header("Location: " . \App\Config\BASE_URL . \App\Config\HOMEPAGE);
            
            exit;
        }
    }
    
    /**
     * Redirects the browser to the default admin application route
     */
    private function redirectFailAdmin() {
        
        if (!empty(Routes::$views['admin'])) {
                    
            header("Location: " . \App\Config\BASE_URL_ADMIN . \App\Config\HOMEPAGE_ADMIN);
            
            exit;
        }
    }

    /**
    * Executes the routing for controllers requiring authentication
    */
    private function redirectAuthMode() {
        
        if (!Auth::verifiedAuth()) {

            $this->controller = "Login";
            $this->path[0] = "login";

        } else {

            $this->controller = Routes::$views['main'][$this->path[0]][0];
        }

        $this->error = false;
    }
    
    /**
     * Executes the routing for admin controllers
     */
    private function redirectAuthAdminMode() {

        if (!Auth::verifiedAuth('admin')) {

            $this->controller = "Login";
            $this->adminPath = "login";

        } else {

            $this->controller = "";
            
            if ($this->adminPath !== null) {
                
                $this->controller = (isset(Routes::$views['admin'][$this->adminPath][0])) ? Routes::$views['admin'][$this->adminPath][0] : "";
            }
        }

        $this->error = ($this->controller == "");
    }

    /**
    * Returns a new instance of the requested controller
    * @return Controller instance
    */
    public function getControllerInstance() {

        $controllerClass = "\App\Controllers\\";
        $controllerClass.= ($this->admin === true) ? "Admin\\" : "";
        $controllerClass.= $this->controller;
        
        if (!class_exists($controllerClass)) {
            
            throw new \Exception("The controller class '" . $this->getControllerName() 
                        . "' does not exist.", 106);
        }

        $controllerObject = new $controllerClass;
        
        if (is_object($controllerObject) && 
                get_parent_class($controllerObject) == __NAMESPACE__ . '\Controller') {
            
            return $controllerObject;
        }
        
        throw new \Exception("The controller class '" . $this->getControllerName() 
                    . "' is not an instance of ". __NAMESPACE__ . "\Controller.", 104);
    }

    /**
    * Returns the name of the requested view
    * @return string View name
    */
    public function getControllerName() {

        return $this->controller;
    }

    /**
     * Gets the controller action (method to execute)
     * @return type
     */
    public function getControllerAction() {

        if (!$this->admin) {
            
            return $this->path[0];
        }
        else {
            
            return $this->adminPath;
        }
    }

    /**
     * Gets the parameters for the current method (Uri query)
     * @return array
     */
    public function getControllerParams() {
        
        $pathParams = [];

        if (!$this->admin) {
            
            $pathParams = array_splice($this->path, 1);
        }
        else {
            
            $pathParams = array_splice($this->path, 2);
        }
            
        $allParams = array_merge($pathParams, $this->queryString);
        
        $postParams = null;
        $postFiles = null;
        
        $input = new HttpInput($this->requestMethod);
        
        $input->parse($postParams, $postFiles);
        
        if (($this->requestMethod === 'post' || $this->requestMethod === 'delete') && $postParams !== null) {
            
            $allParams = array_merge($allParams, $postParams);
        }
        
        return new HttpRequest($allParams, $postFiles, $this->currentUri);
    }
    
    /**
     * Returns true if the current routing requires admin validation
     * @return bool
     */
    public function isAdmin() {
        
        return $this->admin;
    }
    
    /**
     * Gets the request method
     * @return string
     */
    public function getRequestMethod() {
        
        return $this->requestMethod;
    }
    
    /**
     * Gets a default view name based on the requested path
     * @return string
     */
    public function getDefaultView() {
        
        $viewName = '';
        
        if ($this->admin == true) {
            
            $viewName = 'admin/';
        }
        
        $viewName.= $this->getControllerAction();
        $viewName.= '.view.twig';
        
        return $viewName;
    }
    
    /**
     * Redirects the browser to a path
     * @param type $path
     * @return type
     */
    public function redirect($path) {
        
        if ($path === null) {
            
            return;
        }
        else if (is_a($path, __NAMESPACE__ . '\Response')) {
            
            $path->render();
            
            return;
        }
        
        $redirectBaseUrl = \App\Config\BASE_URL;
        $redirectPath = $path;
        $container = 'main';
        
        if ($this->admin) {
            
            $container = 'admin';
            $redirectBaseUrl = \App\Config\BASE_URL_ADMIN;
        }
            
        if (isset(Routes::$views[$container])) {
                
            header("Location: " . $redirectBaseUrl . $redirectPath);

            exit;
        }
    }
}